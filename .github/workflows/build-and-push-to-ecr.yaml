name: Build and Push Image to ECR

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Please confirm if you want to proceed with the build and push to ECR. Select 'yes' to confirm."
        required: true
        default: "no"
        type: choice
        options:
          - 'yes'
          - 'no'
      image_tag:
        description: "Tag for the Docker image"
        required: true
        default: "latest"
        type: string
      ecr_repository:
        description: "ECR repository name"
        required: true
        default: "tm-app"
        type: string
      aws_region:
        description: "AWS region for ECR"
        required: true
        default: "us-east-1"
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check confirmation input
      - name: Check confirmation input
        if: ${{ github.event.inputs.confirmation != 'yes' }}
        run: |
          echo "Confirmation input is not 'yes'. Exiting."
          exit 1

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 4: Cache Yarn dependencies
      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Step 5: Install dependencies with retry
      - name: Install dependencies with retry
        run: |
          for i in {1..3}; do yarn install --network-timeout 100000 && break || sleep 10; done

  build-and-push:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code (again, if needed)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build, tag, and push Docker image
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.inputs.ecr_repository }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          echo "Building Docker image for arm64 architecture..."
          docker buildx build --platform linux/arm64 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --push .